# При разработке пользовательского интерфейса и программ, взаимодействующих с человеком,
# очень важна проверка корректности введённых пользователем данных. Такую проверку в сообществе
# программистов принято называть «проверкой на дурака». Некорректно введённые данные могут «сломать»
# вашу программу, если она не была подготовлена для их обработки.
#
# Напишите функцию check_date(day, month, year), которая проверяет корректность даты рождения по следующим условиям:
#
# Все аргументы должны быть целыми числами (проверить с помощью type(day) is int).
# Годом рождения не может быть год до 1900 и год после 2022.
# Номер месяца не может быть больше 12 и меньше 1.
# Номер дня не может быть больше 31 и меньше 1.
# В сентябре, апреле, июне и ноябре 30 дней.
# Если год является високосным, то в феврале (второй месяц) должно быть 29 дней, в противном случае — 28.
# Если дата корректна, вернуть True, если же хотя бы одно из представленных условий не было выполнено — False.
#
# Примечание: использовать встроенные модули для работы с датами нельзя.
#
# Функция check_date должна содержать в себе функцию is_leap из предыдущего задания. В теле внешней функции вызывайте внутреннюю, чтобы проверить, является ли год високосным.
#
# Пример работы функции:
#
# print(check_date(18,9,1999))
# print(check_date(29,2,2000))
# print(check_date(29,2,2021))
# print(check_date(13,13,2021))
# print(check_date(13.5,12,2021))
# # True
# # True
# False
# False
# False
def check_date(day, month, year):
    tru_date = []
    d_days = {1: 31, 2: 28 + (year % 400 == 0 or (year % 4 == 0 and year % 100 != 0)), 3: 31, 4: 30, 5: 31, 6: 30,
              7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}
    tru_date.append(year >= 1900 and year <= 2022)
    tru_date.append(type(day * month * year) is int)
    tru_date.append(month >= 1 and month <= 12)
    tru_date.append(day >= 1 and day <= d_days.get(month, 0))
    return True if tru_date.count(True) == 4 else False


print(check_date(28, 122, 1900))
